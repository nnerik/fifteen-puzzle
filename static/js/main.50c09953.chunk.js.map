{"version":3,"sources":["Board.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","index","id","className","solved","x","size","y","height","width","viewBox","moveable","x0","y0","onClick","handler","undefined","style","strokeWidth","rx","ry","textAnchor","alignmentBaseline","Board","boardStroke","frameWidth","tileSize","board","map","tile","prevBoard","isMoveable","App","initWidth","initHeight","initBoard","solvedBoard","state","moves","move","updatedBoard","moveTile","setState","shuffle","newBoard","solve","getSolution","forEach","setTimeout","isSolved","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAIMA,G,MAAO,SAAAC,GACX,OAAoB,IAAhBA,EAAMC,MAAoB,KAE5B,yBACEC,GAAIF,EAAMC,MACVE,UAAWH,EAAMI,OAAS,SAAW,WACrCC,GAAIL,EAAMK,EAAI,GAAKL,EAAMM,KACzBC,GAAIP,EAAMO,EAAI,GAAKP,EAAMM,KACzBE,OAAqB,EAAbR,EAAMM,KACdG,MAAoB,EAAbT,EAAMM,KACbI,QAAQ,eAER,uBACEP,UACEH,EAAMW,SACFX,EAAMK,EAAIL,EAAMY,GACd,iBACAZ,EAAMK,EAAIL,EAAMY,GAChB,kBACAZ,EAAMO,EAAIP,EAAMa,GAChB,eACAb,EAAMO,EAAIP,EAAMa,GAChB,iBACA,YACFb,EAAMK,EAAIL,EAAMY,GAChB,OACAZ,EAAMK,EAAIL,EAAMY,GAChB,QACAZ,EAAMO,EAAIP,EAAMa,GAChB,KACAb,EAAMO,EAAIP,EAAMa,GAChB,OACA,QAENC,QAASd,EAAMW,SAAW,kBAAMX,EAAMe,QAAQf,EAAMC,aAASe,GAE7D,0BACEb,UAAU,OACVc,MAAO,CACLC,YAAa,GAEfb,EAAG,IACHE,EAAG,IACHY,GAAI,EACJC,GAAI,EACJX,MAAO,GACPD,OAAQ,KAEV,0BACEL,UAAU,WACVkB,WAAW,SACXC,kBAAkB,UAClBjB,EAAG,IACHE,EAAG,KAEFP,EAAMC,WAOJsB,EAAQ,SAAAvB,GACnB,IAAMwB,EAAcxB,EAAMyB,WAE1B,OACE,yBACEtB,UAAU,QACVO,QAAO,cAASV,EAAM0B,SAAW1B,EAAMS,MACrC,EAAIe,EADC,YACcxB,EAAM0B,SAAW1B,EAAMQ,OAAS,EAAIgB,IAEzD,0BACErB,UAAU,QACVc,MAAO,CACLC,YAAaM,GAEfnB,EAAGmB,EAAc,EACjBjB,EAAGiB,EAAc,EACjBL,GAAI,EACJC,GAAI,EACJX,MAAOT,EAAM0B,SAAW1B,EAAMS,MAAQe,EACtChB,OAAQR,EAAM0B,SAAW1B,EAAMQ,OAASgB,IAE1C,yBACEnB,EAAGmB,EACHjB,EAAGiB,EACHf,MAAOT,EAAM0B,SAAW1B,EAAMS,MAC9BD,OAAQR,EAAM0B,SAAW1B,EAAMQ,QAE9BR,EAAM2B,MAAMC,KAAI,SAACC,EAAM5B,GACtB,OACE,kBAAC,EAAD,CACEK,KAAMN,EAAM0B,SACZrB,EAAGwB,EAAO7B,EAAMS,MAChBF,EAAIsB,EAAO7B,EAAMS,MAAS,EAC1BG,GAAIZ,EAAM8B,UAAU7B,GAASD,EAAMS,MACnCI,GAAKb,EAAM8B,UAAU7B,GAASD,EAAMS,MAAS,EAC7CR,MAAOA,EACPG,OAAQJ,EAAMI,OACdO,UACGX,EAAMI,QAAU2B,YAAW/B,EAAM2B,MAAO3B,EAAMS,MAAOR,GAExDc,QAASf,EAAMe,gBCvBdiB,E,2MAvEbC,UAAY,E,EACZC,WAAa,E,EACbC,UAAYC,YAAY,EAAKH,UAAW,EAAKC,Y,EAC7CG,MAAQ,CACN5B,MAAO,EAAKwB,UACZzB,OAAQ,EAAK0B,WACbP,MAAO,EAAKQ,UACZL,UAAW,EAAKK,UAChBG,MAAO,G,EAGTC,KAAO,SAAArC,GACL,IAAMsC,EAAeC,YAAS,EAAKJ,MAAMV,MAAOzB,GAChD,EAAKwC,SAAS,CACZZ,UAAW,EAAKO,MAAMV,MACtBA,MAAOa,EACPF,MAAO,EAAKD,MAAMC,MAAQ,K,EAI9BK,QAAU,SAAAzC,GACR,IAAMyB,EAAQiB,YAAS,EAAKP,MAAM5B,MAAO,EAAK4B,MAAM7B,QACpD,EAAKkC,SAAS,CACZf,MAAOA,EACPG,UAAWH,EACXW,MAAO,K,EAIXO,MAAQ,WACNC,YAAY,EAAKT,MAAMV,MAAO,EAAKU,MAAM5B,OAAOsC,SAAQ,SAAC7C,EAAID,GAC3D+C,YAAW,WACT,EAAKT,KAAKrC,KACT,IAAMD,O,wEAKX,IAAMG,EAAS6C,YAASC,KAAKb,MAAMV,MAAOuB,KAAKb,MAAM5B,OACrD,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,uCACA,kBAAC,EAAD,CACEuB,SAAU,IACVD,WAAY,EACZa,MAAOY,KAAKZ,MACZ7B,MAAOyC,KAAKb,MAAM5B,MAClBD,OAAQ0C,KAAKb,MAAM7B,OACnBmB,MAAOuB,KAAKb,MAAMV,MAClBG,UAAWoB,KAAKb,MAAMP,UACtBf,QAASmC,KAAKX,KACdnC,OAAQA,IAEV,qCAC+B,IAArB8C,KAAKb,MAAMC,OAAelC,EAAS,GAAK8C,KAAKb,MAAMC,OAE7D,2BACE,4BAAQnC,UAAU,aAAaW,QAASoC,KAAKP,SAA7C,WAGA,4BAAQxC,UAAU,aAAaW,QAASoC,KAAKL,OAA7C,gB,GA9DMM,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.50c09953.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Board.css\";\nimport { isMoveable } from \"fifteen-core\";\n\nconst Tile = props => {\n  if (props.index === 0) return null;\n  return (\n    <svg\n      id={props.index}\n      className={props.solved ? \"Solved\" : \"Unsolved\"}\n      x={(props.x - 1) * props.size}\n      y={(props.y - 1) * props.size}\n      height={props.size * 3}\n      width={props.size * 3}\n      viewBox=\"0 0 300 300\"\n    >\n      <g\n        className={\n          props.moveable\n            ? props.x < props.x0\n              ? \"Clickable Left\"\n              : props.x > props.x0\n              ? \"Clickable Right\"\n              : props.y < props.y0\n              ? \"Clickable Up\"\n              : props.y > props.y0\n              ? \"Clickable Down\"\n              : \"Clickable\"\n            : props.x < props.x0\n            ? \"Left\"\n            : props.x > props.x0\n            ? \"Right\"\n            : props.y < props.y0\n            ? \"Up\"\n            : props.y > props.y0\n            ? \"Down\"\n            : \"Still\"\n        }\n        onClick={props.moveable ? () => props.handler(props.index) : undefined}\n      >\n        <rect\n          className=\"Tile\"\n          style={{\n            strokeWidth: 2\n          }}\n          x={102}\n          y={102}\n          rx={3}\n          ry={3}\n          width={96}\n          height={96}\n        ></rect>\n        <text\n          className=\"TileText\"\n          textAnchor=\"middle\"\n          alignmentBaseline=\"central\"\n          x={150}\n          y={150}\n        >\n          {props.index}\n        </text>\n      </g>\n    </svg>\n  );\n};\n\nexport const Board = props => {\n  const boardStroke = props.frameWidth;\n\n  return (\n    <svg\n      className=\"Board\"\n      viewBox={`0 0 ${props.tileSize * props.width +\n        2 * boardStroke} ${props.tileSize * props.height + 2 * boardStroke}`}\n    >\n      <rect\n        className=\"Frame\"\n        style={{\n          strokeWidth: boardStroke\n        }}\n        x={boardStroke / 2}\n        y={boardStroke / 2}\n        rx={3}\n        ry={3}\n        width={props.tileSize * props.width + boardStroke}\n        height={props.tileSize * props.height + boardStroke}\n      />\n      <svg\n        x={boardStroke}\n        y={boardStroke}\n        width={props.tileSize * props.width}\n        height={props.tileSize * props.height}\n      >\n        {props.board.map((tile, index) => {\n          return (\n            <Tile\n              size={props.tileSize}\n              x={tile % props.width}\n              y={(tile / props.width) | 0}\n              x0={props.prevBoard[index] % props.width}\n              y0={(props.prevBoard[index] / props.width) | 0}\n              index={index}\n              solved={props.solved}\n              moveable={\n                !props.solved && isMoveable(props.board, props.width, index)\n              }\n              handler={props.handler}\n            />\n          );\n        })}\n      </svg>\n    </svg>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  newBoard,\n  solvedBoard,\n  moveTile,\n  isSolved,\n  getSolution\n} from \"fifteen-core\";\nimport { Board } from \"./Board\";\n\nclass App extends React.Component {\n  initWidth = 3;\n  initHeight = 3;\n  initBoard = solvedBoard(this.initWidth, this.initHeight);\n  state = {\n    width: this.initWidth,\n    height: this.initHeight,\n    board: this.initBoard,\n    prevBoard: this.initBoard,\n    moves: 0\n  };\n\n  move = id => {\n    const updatedBoard = moveTile(this.state.board, id);\n    this.setState({\n      prevBoard: this.state.board,\n      board: updatedBoard,\n      moves: this.state.moves + 1\n    });\n  };\n\n  shuffle = id => {\n    const board = newBoard(this.state.width, this.state.height);\n    this.setState({\n      board: board,\n      prevBoard: board,\n      moves: 0\n    });\n  };\n\n  solve = () => {\n    getSolution(this.state.board, this.state.width).forEach((id, index) => {\n      setTimeout(() => {\n        this.move(id);\n      }, 150 * index);\n    });\n  };\n\n  render() {\n    const solved = isSolved(this.state.board, this.state.width);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Fifteen</h1>\n          <Board\n            tileSize={100}\n            frameWidth={4}\n            moves={this.moves}\n            width={this.state.width}\n            height={this.state.height}\n            board={this.state.board}\n            prevBoard={this.state.prevBoard}\n            handler={this.move}\n            solved={solved}\n          />\n          <p>\n            Moves: {this.state.moves === 0 && solved ? \"\" : this.state.moves}\n          </p>\n          <p>\n            <button className=\"App-button\" onClick={this.shuffle}>\n              Shuffle\n            </button>\n            <button className=\"App-button\" onClick={this.solve}>\n              Solve\n            </button>\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
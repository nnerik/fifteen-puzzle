{"version":3,"sources":["fifteen.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["solvedBoard","width","height","concat","Array","keys","distance","a","b","Math","abs","isMoveable","board","tile","manhattan","map","pos","index","reduce","prev","cur","permuteEven","arr","length","newArray","parity","i","randomIndex","trunc","random","temp","newBoard","moveTile","increasing","rest","partition","list","n","acc","slice","push","pqueue","node","score","parent","pop","getSolution","start","interval","Date","getTime","heuristic","matrix","row","filter","value","seq","_","reversals","queue","nodes","gScore","hScore","from","saveNode","fromNode","fScore","reconstructPath","goal","path","findIndex","neighbors","blank","tiles","current","neighbor","alert","Tile","props","id","className","solved","x","size","y","viewBox","moveable","x0","y0","onClick","handler","undefined","style","strokeWidth","rx","ry","textAnchor","alignmentBaseline","Board","boardStroke","frameWidth","tileSize","prevBoard","App","initWidth","initHeight","initBoard","state","moves","move","updatedBoard","setState","shuffle","solve","forEach","setTimeout","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e9b1544.chunk.js","sourcesContent":["// Create a solved board of size width x height.\nexport const solvedBoard = (width, height) => {\n  return [width * height - 1].concat([...Array(width * height - 1).keys()]);\n};\n\nconst distance = (a, b, width) =>\n  Math.abs(((a / width) | 0) - ((b / width) | 0)) +\n  Math.abs((a % width) - (b % width));\n\nexport const isMoveable = (board, width, tile) =>\n  distance(board[tile], board[0], width) === 1;\n\nconst manhattan = ([_, ...board], width) => {\n  return board\n    .map((pos, index) => distance(pos, index, width))\n    .reduce((prev = 0, cur) => prev + cur);\n};\n\nexport const isSolved = (board, width) => manhattan(board, width) === 0;\n\n// Randomly shuffle the elements of an array in an even permutation.\nconst permuteEven = arr => {\n  if (arr.length < 3) return arr;\n  else {\n    const newArray = [...arr];\n    let parity = 0;\n    for (let i = 0; i < arr.length - 2; i++) {\n      const randomIndex = Math.trunc(Math.random() * (arr.length - i));\n      if (randomIndex > 0) {\n        const temp = newArray[i];\n        newArray[i] = newArray[i + randomIndex];\n        newArray[i + randomIndex] = temp;\n        parity += 1;\n      }\n    }\n    if (parity % 2 > 0) {\n      const temp = newArray[arr.length - 2];\n      newArray[arr.length - 2] = newArray[arr.length - 1];\n      newArray[arr.length - 1] = temp;\n    }\n    return newArray;\n  }\n};\n\n// Create a new shuffled board of size width x height.\nexport const newBoard = (width = 4, height = 4) => {\n  return [width * height - 1].concat(\n    permuteEven([...Array(width * height - 1).keys()])\n  );\n};\n\nexport const moveTile = (board, tile) => {\n  const newBoard = [...board];\n  newBoard[0] = board[tile];\n  newBoard[tile] = board[0];\n  return newBoard;\n};\n\n/*\n * Helper functions\n */\n\nconst increasing = ([prev, ...rest]) => {\n  if (rest.length === 0) return true;\n  if (prev > rest[0]) return false;\n  return increasing(rest);\n};\n\nconst partition = (list, n, acc = []) => {\n  if (list.length <= n) return acc.concat([list]);\n  return partition(list.slice(n), n, acc.concat([list.slice(0, n)]));\n};\n\nconst transpose = matrix => matrix[0].map((_, i) => matrix.map(row => row[i]));\n\nconst reversals = ([_, ...board], width) =>\n  partition(board, width)\n    .map((row, index) =>\n      row.filter(value => Math.trunc(value / width) === index)\n    )\n    .filter(seq => !increasing(seq)).length +\n  transpose(partition(board, width))\n    .map((row, index) => row.filter(value => value % width === index))\n    .filter(seq => !increasing(seq)).length;\n\n/*\n * Prority queue implementation\n */\n\nconst isEmpty = pqueue => pqueue.length === 0;\n\nconst push = (pqueue, node, score) => {\n  let index = pqueue.length;\n  let parent = Math.trunc((index - 1) / 2);\n\n  pqueue.push({ node: node, score: score });\n\n  while (index > 0 && pqueue[index].score > pqueue[parent].score) {\n    const temp = pqueue[index];\n    pqueue[index] = pqueue[parent];\n    pqueue[parent] = temp;\n    index = parent;\n    parent = Math.trunc((index - 1) / 2);\n  }\n};\n\nconst pop = pqueue => pqueue.pop();\n/*\n * Find shortest solution using A*.\n */\n\nexport const getSolution = (start, width, interval) => {\n  // Record start time. We will return prematurely if it takes too long.\n  const timeLimit = new Date().getTime() + interval;\n\n  // Define the heuristic to be applied\n  const heuristic = node => manhattan(node, width) + 2 * reversals(node, width);\n\n  // We need a priority queue for the A* algorithm\n  let queue = [];\n  push(queue, start, heuristic(start));\n\n  // We also need a database for visited nodes\n  let nodes = {};\n  nodes[start] = {\n    gScore: 0,\n    hScore: heuristic(start),\n    from: null\n  };\n\n  const saveNode = (node, fromNode) => {\n    const gScore = nodes[fromNode].gScore + 1;\n    const hScore = heuristic(node);\n    nodes[node] = {\n      gScore: gScore,\n      hScore: hScore,\n      from: fromNode\n    };\n  };\n\n  const gScore = node => nodes[node].gScore;\n  const hScore = node => nodes[node].hScore;\n  const fScore = node => gScore(node) + hScore(node);\n  const fromNode = node => nodes[node].from;\n  const isVisited = node => node in nodes;\n\n  // Return list of moves for the shortest path to the goal\n  const reconstructPath = goal => {\n    let path = [];\n    let node = goal;\n    while (fromNode(node) != null) {\n      const tile = fromNode(node).findIndex(pos => pos === node[0]);\n      path = [tile, ...path];\n      node = fromNode(node);\n    }\n    return path;\n  };\n\n  // Return list of neigboring boards\n  const neighbors = ([blank, ...tiles]) =>\n    tiles\n      .map((pos, index) => (distance(blank, pos, width) === 1 ? index + 1 : 0))\n      .filter(tile => tile > 0)\n      .map(tile => moveTile([blank, ...tiles], tile));\n\n  // Main A* loop\n  while (!isEmpty(queue)) {\n    const current = pop(queue).node;\n    if (hScore(current) === 0) {\n      return reconstructPath(current);\n      // } else if (new Date().getTime() > timeLimit && current != start) {\n      //   return reconstructPath(current);\n    }\n\n    for (const neighbor of neighbors(current)) {\n      if (!isVisited(neighbor) || gScore(current) + 1 < gScore(neighbor)) {\n        saveNode(neighbor, current);\n        push(queue, neighbor, fScore(neighbor));\n      }\n    }\n  }\n  alert(\"No solution found!\");\n  return [];\n};\n","import React from \"react\";\nimport \"./Board.css\";\nimport { isMoveable } from \"./fifteen\";\n\nconst Tile = props => {\n  if (props.index === 0) return null;\n  return (\n    <svg\n      id={props.index}\n      className={props.solved ? \"Solved\" : \"Unsolved\"}\n      x={(props.x - 1) * props.size}\n      y={(props.y - 1) * props.size}\n      height={props.size * 3}\n      width={props.size * 3}\n      viewBox=\"0 0 300 300\"\n    >\n      <g\n        className={\n          props.moveable\n            ? props.x < props.x0\n              ? \"Clickable Left\"\n              : props.x > props.x0\n              ? \"Clickable Right\"\n              : props.y < props.y0\n              ? \"Clickable Up\"\n              : props.y > props.y0\n              ? \"Clickable Down\"\n              : \"Clickable\"\n            : props.x < props.x0\n            ? \"Left\"\n            : props.x > props.x0\n            ? \"Right\"\n            : props.y < props.y0\n            ? \"Up\"\n            : props.y > props.y0\n            ? \"Down\"\n            : \"Still\"\n        }\n        onClick={props.moveable ? () => props.handler(props.index) : undefined}\n      >\n        <rect\n          className=\"Tile\"\n          style={{\n            strokeWidth: 2\n          }}\n          x={102}\n          y={102}\n          rx={3}\n          ry={3}\n          width={96}\n          height={96}\n        ></rect>\n        <text\n          className=\"TileText\"\n          textAnchor=\"middle\"\n          alignmentBaseline=\"central\"\n          x={150}\n          y={150}\n        >\n          {props.index}\n        </text>\n      </g>\n    </svg>\n  );\n};\n\nexport const Board = props => {\n  const boardStroke = props.frameWidth;\n\n  return (\n    <svg\n      width={props.tileSize * props.width + 2 * boardStroke}\n      height={props.tileSize * props.height + 2 * boardStroke}\n    >\n      <rect\n        className=\"Board\"\n        style={{\n          strokeWidth: boardStroke\n        }}\n        x={boardStroke / 2}\n        y={boardStroke / 2}\n        rx={3}\n        ry={3}\n        width={props.tileSize * props.width + boardStroke}\n        height={props.tileSize * props.height + boardStroke}\n      />\n      <svg\n        x={boardStroke}\n        y={boardStroke}\n        width={props.tileSize * props.width}\n        height={props.tileSize * props.height}\n      >\n        {props.board.map((tile, index) => {\n          return (\n            <Tile\n              size={props.tileSize}\n              x={tile % props.width}\n              y={(tile / props.width) | 0}\n              x0={props.prevBoard[index] % props.width}\n              y0={(props.prevBoard[index] / props.width) | 0}\n              index={index}\n              solved={props.solved}\n              moveable={\n                !props.solved && isMoveable(props.board, props.width, index)\n              }\n              handler={props.handler}\n            />\n          );\n        })}\n      </svg>\n    </svg>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  newBoard,\n  solvedBoard,\n  moveTile,\n  isSolved,\n  getSolution\n} from \"./fifteen\";\nimport { Board } from \"./Board\";\n\nclass App extends React.Component {\n  initWidth = 3;\n  initHeight = 3;\n  initBoard = solvedBoard(this.initWidth, this.initHeight);\n  state = {\n    width: this.initWidth,\n    height: this.initHeight,\n    board: this.initBoard,\n    prevBoard: this.initBoard,\n    moves: 0\n  };\n\n  move = id => {\n    const updatedBoard = moveTile(this.state.board, id);\n    this.setState({\n      prevBoard: this.state.board,\n      board: updatedBoard,\n      moves: this.state.moves + 1\n    });\n  };\n\n  shuffle = id => {\n    const board = newBoard(this.state.width, this.state.height);\n    this.setState({\n      board: board,\n      prevBoard: board,\n      moves: 0\n    });\n  };\n\n  solve = () => {\n    getSolution(this.state.board, this.state.width).forEach((id, index) => {\n      setTimeout(() => {\n        this.move(id);\n      }, 150 * index);\n    });\n  };\n\n  render() {\n    const solved = isSolved(this.state.board, this.state.width);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Fifteen</h1>\n          <Board\n            tileSize={100}\n            frameWidth={4}\n            moves={this.moves}\n            width={this.state.width}\n            height={this.state.height}\n            board={this.state.board}\n            prevBoard={this.state.prevBoard}\n            handler={this.move}\n            solved={solved}\n          />\n          <p>\n            Moves: {this.state.moves === 0 && solved ? \"\" : this.state.moves}\n          </p>\n          <p>\n            <button className=\"App-button\" onClick={this.shuffle}>\n              Shuffle\n            </button>\n            <button className=\"App-button\" onClick={this.solve}>\n              Solve\n            </button>\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}